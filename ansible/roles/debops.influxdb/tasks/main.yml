---

- name: Install Influxdb requested packages
  package:
    name: '{{ item }}'
    state: 'present'
  with_flattened:
    - '{{ influxdb__base_packages }}'
    - '{{ influxdb__packages }}'
    - '{{ influxdb__host_packages }}'
    - '{{ influxdb__group_packages }}'
    - '{{ influxdb__dependent_packages }}'
  register: influxdb__register_install
  until: influxdb__register_install is succeeded
  notify: [ 'Reload influxdb' ]

# - name: Create an admin user on a remote host using custom login credentials
#   influxdb_user:
#     user_name: john
#     user_password: s3cr3t
#     admin: yes
#     hostname: "{{ influxdb__hostname }}"
#     # login_username: "{{ influxdb_username }}"
#     # login_password: "{{ influxdb_password }}"

# - name: Create database
#   influxdb_database:
#     hostname: "{{ influxdb__ip_address }}"
#     username: "{{ influxdb__database_username }}"
#     # password: "{{ influxdb_password }}"
#     database_name: "{{ influxdb__database_name }}"


- name: Drop database
  influxdb_database:
    hostname: '{{ item.hostname | d(item.name) }}'
    database_name: '{{ item.database_name }}'
    state: 'absent'
  with_flattened: '{{ influxdb__databases + influxdb__dependent_databases }}'
  when: ((item.database_name|d(False) or item.hostname|d(False)) and
         (item.state is defined and item.state == 'absent'))

- name: Create database
  influxdb_database:
    hostname: '{{ item.hostname | d(item.name) }}'
    database_name: '{{ item.database_name }}'
    state: 'present'
    encoding: '{{ item.encoding | d(omit) }}'
    collation: '{{ item.collation | d(omit) }}'
  with_flattened: '{{ influxdb__databases + influxdb__dependent_databases }}'
  when: ((item.database_name|d(False) or item.hostname|d(False)) and
         (item.state is undefined or item.state != 'absent'))
  register: influxdb__register_database_status


- name: Drop user
  influxdb_user:
    user_name: '{{ item.user_name | d(item.name) }}'
    # user_password: '{{ item.user_password }}'
    # hostname: '{{ item.hostname | default(influxdb__hostname) }}'
    state: 'absent'
  with_flattened: '{{ influxdb__users + influxdb__dependent_users }}'
  when: ((item.user_name|d(False)) and
         (item.state is defined and item.state == "absent"))
  # no_log: True

- name: Create user
  influxdb_user:
    user_name: '{{ item.user_name | d(item.name) }}'
    user_password: '{{ item.user_password | default(lookup("password",
                  secret + "/influxdb/" +
                  "/credentials/" + item.user_name | d(False) + "/password " +
                  "length=" + influxdb__password_length)) }}'
    admin: '{{ item.admin | d(omit) }}'
    grants: '{{ item.grants | d(omit) }}'
    hostname: '{{ item.hostname | default(influxdb__hostname) }}'
    login_username: '{{ item.login_username }}'
    login_password: '{{ item.login_password }}'
    state: 'present'
  with_flattened: '{{ influxdb__users + influxdb__dependent_users }}'
  register: influxdb__register_create_users
  when: ((item.user_name|d(False) or item.user_password|d(False) or item.login_username|d(False) or item.login_password|d(False)) and
         (item.state is undefined or item.state != "absent"))
  # no_log: True

# - name: Grant default privileges to users
#   influxdb_user:
#     user_name: '{{ item.0.user_name | d(item.0.name) }}'
#     # hostname: '{{ item.0.hostname | default(influxdb__hostname) }}'
#     grants: '{{ (item.0.database_name | d(item.0.name)) + influxdb__default_privileges_grant }}'
#   with_together:
#     - '{{ influxdb__users + lookup("flattened", influxdb__dependent_users, wantlist=True) }}'
#     - '{{ influxdb__register_create_users.results }}'
#   when: ((item.0.user_name|d(False)) and
#          (item.0.state is undefined or item.0.state != "absent") and
#          influxdb__default_privileges|d(False) and
#          (item.0.grants is undefined or item.0.grants))
