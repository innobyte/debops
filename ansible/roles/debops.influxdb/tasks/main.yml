---

- name: Install Influxdb requested packages
  package:
    name: '{{ q("flattened", influxdb__base_packages
                             + influxdb__packages
                             + influxdb__host_packages
                             + influxdb__group_packages
                             + influxdb__dependent_packages) }}'
    state: 'present'
  register: influxdb__register_packages
  until: influxdb__register_packages is succeeded
  notify: [ 'Restart influxdb' ]

- name: Install required Python modules
  pip:
    name: '{{ item }}'
    state: 'latest'
  loop: '{{ influxdb__pip_packages }}'
  register: influxdb__register_pip_install
  until: influxdb__register_pip_install is succeeded
  when: influxdb__pip_packages|d()

- name: Divert the original influxdb configuration file
  command: dpkg-divert --quiet --local --divert /etc/influxdb/influxdb.conf.dpkg-divert --rename /etc/influxdb/influxdb.conf
  args:
    creates: '/etc/influxdb/influxdb.conf.dpkg-divert'

- name: Configure main influxdb config file
  template:
    src: 'influxdb.conf.j2'
    dest: '/etc/influxdb/influxdb.conf'
    owner: 'root'
    group: 'adm'
    mode: '0644'
  notify: [ 'Restart influxdb' ]

- name: Add database server user to specified groups
  user:
    name: 'influxdb'
    groups: '{{ influxdb__append_groups | join(",") | default(omit) }}'
    append: True
    createhome: False
  when: influxdb__pki|bool

- name: Create admin user
  influxdb_user:
    user_name: '{{ item.user_name | d(item.name) }}'
    user_password: '{{ item.user_password | default(lookup("password",
                  secret + "/influxdb/" +
                  "/credentials/" + item.user_name | d(False) + "/password " +
                  "length=" + influxdb__password_length)) }}'
    admin: '{{ item.admin | d(omit) }}'
    grants: '{{ item.grants | d(omit) }}'
    hostname: '{{ item.hostname | default(influxdb__hostname) }}'
    state: 'present'
  with_flattened: '{{ influxdb__admin_users + influxdb__admin_dependent_users + influxdb__default_admin_users }}'
  register: influxdb__register_create_users
  when: ((item.user_name|d(False) or item.user_password|d(False)) and
         (item.state is undefined or item.state != "absent"))

- name: Drop database
  influxdb_database:
    hostname: '{{ item.hostname | d("localhost") }}'
    database_name: '{{ item.database_name | d(item.name) }}'
    state: 'absent'
    login_username: '{{ item.login_username | d(omit) }}'
    login_password: '{{ item.login_password | d(omit) }}'
  with_flattened: '{{ influxdb__databases + influxdb__dependent_databases }}'
  when: ((item.database_name|d(item.name) or item.hostname|d("localhost") or item.login_username|d(False) or item.login_password|d(False)) and
         (item.state is defined and item.state == 'absent'))

- name: Create database
  influxdb_database:
    hostname: '{{ item.hostname | d("localhost") }}'
    database_name: '{{ item.database_name | d(item.name) }}'
    state: 'present'
    login_username: '{{ item.login_username | d(omit) }}'
    login_password: '{{ item.login_password | d(omit) }}'
  with_flattened: '{{ influxdb__databases + influxdb__dependent_databases }}'
  when: ((item.database_name|d(item.name) or item.hostname|d("localhost") or item.login_username|d(False) or item.login_password|d(False)) and
         (item.state is undefined or item.state != 'absent'))
  register: influxdb__register_database_status

- name: Drop user
  influxdb_user:
    user_name: '{{ item.user_name | d(item.name) }}'
    user_password: '{{ item.user_password }}'
    hostname: '{{ item.hostname | default(influxdb__hostname) }}'
    state: 'absent'
  with_flattened: '{{ influxdb__users + influxdb__dependent_users }}'
  when: ((item.user_name|d(False)) and
         (item.state is defined and item.state == "absent"))

- name: Create user
  influxdb_user:
    user_name: '{{ item.user_name | d(item.name) }}'
    user_password: '{{ item.user_password | default(lookup("password",
                  secret + "/influxdb/" +
                  "/credentials/" + item.user_name | d(False) + "/password " +
                  "length=" + influxdb__password_length)) }}'
    grants: '{{ item.grants | d(omit) }}'
    hostname: '{{ item.hostname | default(influxdb__hostname) }}'
    login_username: '{{ item.login_username | d(omit) }}'
    login_password: '{{ item.login_password | d(omit) }}'
    state: 'present'
  with_flattened: '{{ influxdb__users + influxdb__dependent_users }}'
  register: influxdb__register_create_users
  when: ((item.user_name|d(False) or item.user_password|d(False) or item.login_username|d(False) or item.login_password|d(False)) and
         (item.state is undefined or item.state != "absent"))

- name: Make sure that Ansible local facts directory exists
  file:
    path: '/etc/ansible/facts.d'
    state: 'directory'
    mode: '0755'

- name: Save influxdb local facts
  template:
    src: 'etc/ansible/facts.d/influxdb.fact.j2'
    dest: '/etc/ansible/facts.d/influxdb.fact'
    mode: '0755'
  register: influxdb__register_facts

- name: Update Ansible facts if they were modified
  action: setup
  when: influxdb__register_facts is changed
