---
- name: Install External APT source key
  apt_key:
    url: '{{ jenkins_repo_key_url }}'
    state: present

- name: Install External APT source
  apt_repository:
    repo: '{{ jenkins_repo_url }}'
    state: present
    update_cache: yes

# - name: Install Jenkins
#   apt:
#     pkg: jenkins
#     state: latest
- name: Install jenkins
  apt:
    name: "{{ item }}"
  with_items:
    - jenkins
    - jenkins-job-builder
    - jenkins-job-builder-doc

- name: Install Nginx
  apt:
    pkg: nginx
    state: present

- name: Create external directory to supporting tools
  file:
    path: '{{ item }}'
    owner: '{{ jenkins__user }}'
    group: '{{ jenkins__group }}'
    state: directory
  with_items:
    - '{{ jenkins_ext_cli_root }}'
    - '{{ jenkins_ext_job_builder_root }}'

- name: Ensure Jenkins is started and runs on startup.
  service:
    name: jenkins
    state: started
    enabled: yes

# - name: Wait for Jenkins to start up before proceeding.
#   shell: curl --head --silent {{ jenkins_internal_service_url }}
#   register: result
#   until: result.stdout.find("200 OK") != -1
#   retries: "{{ jenkins_connection_retries }}"
#   delay: "{{ jenkins_connection_delay }}"
#   changed_when: false

# - name: Get the jenkins-cli jarfile from the Jenkins server.
#   get_url:
#     url: "{{ jenkins_internal_service_url }}/jnlpJars/jenkins-cli.jar"
#     dest: "{{ jenkins_ext_cli_root }}/jenkins-cli"
#     owner: '{{ jenkins_system_user }}'
#     group: '{{ jenkins_system_group }}'
#   register: jenkins_jarfile_get
#   until: "'OK' in jenkins_jarfile_get.msg or 'file already exists' in jenkins_jarfile_get.msg"
#   retries: "{{ jenkins_connection_retries }}"
#   delay: "{{ jenkins_connection_delay }}"

# - name: Set jenkins_cli fact for use in other tasks
#   set_fact: jenkins_cli='java -jar {{ jenkins_jarfile_get.dest }} -s {{ jenkins_internal_service_url }}'

# # Jenkins doesn't allow updates via CLI, though that is required before plugins
# # can be installed via CLI. See: https://gist.github.com/rowan-m/1026918
# - name: Create Jenkins updates folder.
#   file:
#     path: /var/lib/jenkins/updates
#     owner: '{{ jenkins_system_user }}'
#     group: '{{ jenkins_system_group }}'
#     mode: 0755
#     state: directory

# - name: Update Jenkins plugin data.
#   shell: >
#     curl -L https://updates.jenkins-ci.org/update-center.json | sed '1d;$d' > /var/lib/jenkins/updates/default.json
#     creates=/var/lib/jenkins/updates/default.json
# - name: Permissions for default.json updates info.
#   file:
#     path: /var/lib/jenkins/updates/default.json
#     owner: '{{ jenkins_system_user }}'
#     group: '{{ jenkins_system_group }}'
#     mode: 0755

# - name: Install jenkins-job-builder
#   pip:
#     name: '{{ item }}'
#     state: present
#   with_items:
#     - PyYAML
#     - python-jenkins
#     - jenkins-job-builder

# - name: Configure jenkins-job-builder
#   template:
#     src: jenkins-job-builder/config.ini.j2
#     dest: '{{ jenkins_ext_job_builder_config }}'

# - name: Create Jenkins group
#   group:
#     name: '{{ jenkins_system_group }}'
#     gid: '{{ jenkins_system_uid_gid }}'

# - name: Create Jenkins user
#   user:
#     name: '{{ jenkins_system_user }}'
#     system: yes
#     generate_ssh_key: yes
#     ssh_key_bits: 2048
#     ssh_key_file: '.ssh/id_rsa'
#     uid: '{{ jenkins_system_uid_gid }}'
#     group: '{{ jenkins_system_group }}'
#     home: /var/lib/jenkins
#     shell: /bin/bash

# - name: Create jenkins external directory
#   file:
#     path: '{{ item }}'
#     owner: '{{ jenkins_system_user }}'
#     group: '{{ jenkins_system_group }}'
#     state: directory
#   with_items:
#     - '{{ jenkins_ext_root }}'

# - name: Ensure jenkins_ext_groovy_root exists
#   file:
#     path: '{{ jenkins_ext_groovy_root }}'
#     state: directory

# - name: Generate Groovy Script template for global security and admin user
#   template:
#     src: 'groovy/{{ item }}.groovy.j2'
#     dest: '{{ jenkins_ext_groovy_root }}/{{ item }}.groovy'
#   register: jenkins_groovy_script_templates
#   with_flattened:
#     - '{{ jenkins_security_check_groovy_script }}' # Individual script used below
#     - '{{ jenkins_security_enable_groovy_script }}' # Individual script used below
#     - jenkins_groovy_scripts
#     - jenkins_group_groovy_scripts
#     - jenkins_host_groovy_scripts

# - name: Test if Auth is configured
#   command: '{{ jenkins_cli }} groovy {{ jenkins_ext_groovy_root }}/{{ item }}.groovy'
#   register: jenkins_auth_result
#   with_items:
#     - '{{ jenkins_security_check_groovy_script }}'
#   failed_when: ( jenkins_auth_result.stderr != "" ) and
#                ( 'hudson.security.AccessDeniedException2' not in jenkins_auth_result.stderr )
#   changed_when: False
#   when: jenkins_auth is defined and jenkins_auth

# - name: Configure auth if it is not configured...
#   command: '{{ jenkins_cli }} groovy {{ jenkins_ext_groovy_root }}/{{ item }}.groovy'
#   register: jenkins_configure_auth_result
#   with_items:
#     - '{{ jenkins_security_enable_groovy_script }}'
#   when: ( jenkins_auth_result is defined ) and
#         ( 'hudson.security.AccessDeniedException2' not in jenkins_auth_result.stderr )

# - name: Login to Jenkins for the next task to run groovy
#   command: '{{ jenkins_cli }} login --username {{ jenkins_service_user }} --password {{ jenkins_service_password }}'
#   register: jenkins_cli_login
#   changed_when: False
#   no_log: true
#   when: jenkins_configure_auth_result is defined

# - name: Install Jenkins plugins.
#   command: >
#     {{ jenkins_cli }} install-plugin {{ item }}
#     creates=/var/lib/jenkins/plugins/{{ item }}.jpi
#   with_flattened:
#     - jenkins_plugins
#     - jenkins_group_plugins
#     - jenkins_host_plugins
#   notify: restart jenkins

# - name: Run Groovy scripts using jenkins-cli
#   command: '{{ jenkins_cli }} groovy {{ jenkins_ext_groovy_root }}/{{ item }}.groovy'
#   with_flattened:
#     - jenkins_groovy_scripts
#     - jenkins_group_groovy_scripts
#     - jenkins_host_groovy_scripts
#   when: jenkins_groovy_script_templates is defined and
#         jenkins_groovy_script_templates.changed

# - name: Logout of Jenkins
#   command: '{{ jenkins_cli }} logout'
#   changed_when: False
#   when: jenkins_cli_login is defined

# - name: Clone jenkins-job-builder repos full of job definitions
#   git:
#     repo: '{{ item.repo }}'
#     dest: '{{ jenkins_ext_job_builder_repos_dir }}/{{ item.name }}'
#     update: True
#     accept_hostkey: True
#     version: '{{ item.version | default("HEAD") }}'
#   register: jenkins_job_builder_git_clone
#   with_flattened:
#     - jenkins_job_builder_repos

# - name: Run jenkins-job-builder against the configured instance
#   shell: "{{ jenkins_job_builder }} update {{ jenkins_ext_job_builder_repos_dir }}/{{ item.0.name }}/{{ item.0.jobs_dir }} {{ item.1 }}"
#   with_subelements:
#     - jenkins_job_builder_repos
#     - filters
# #   when: jenkins_job_builder_git_clone is defined and
# # jenkins_job_builder_git_clone.changed
# # - { include: tasks.yml }