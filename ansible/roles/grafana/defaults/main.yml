---
# .. vim: foldmarker=[[[,]]]:foldmethod=marker

# .. Copyright (C) 2019      Leonardo Bechea <leonardo.bechea@innobyte.com>
# .. Copyright (C) 2019      Alin Alexandru <alin.alexandru@innobyte.com>
# .. Copyright (C) 2020      Robin Schneider <ypid@riseup.net>
# .. Copyright (C) 2019-2020 DebOps <https://debops.org/>
# .. SPDX-License-Identifier: GPL-3.0-or-later

# debops.grafana default variables
# ================================

# .. contents:: Sections
#    :local:
#
# .. include:: ../../../../includes/global.rst


# Domain name configuration [[[
# -----------------------------

# .. envvar:: grafana__fqdn [[[
#
# String of the Fully Qualified domain names on which the Grafana
# application will be available, used by the webserver. It will be
# used as the e-mail sender domain name.
grafana__fqdn: '{{ ansible_hostname }}.{{ grafana__domain }}'

                                                                   # ]]]
# .. envvar:: grafana__domain [[[
#
# The DNS domain used by other variables in the ``debops.grafana`` role.
grafana__domain: '{{ ansible_domain }}'

                                                                   # ]]]
                                                                   # ]]]
# Installation, APT packages [[[
# ------------------------------

# .. envvar:: grafana__upstream_apt_id [[[
#
# The Grafana fingerprint.
grafana__upstream_apt_id: '4E40 DDF6 D76E 284A 4A67  80E4 8C8C 34C5 2409 8CB6'

                                                                   # ]]]
# .. envvar:: grafana__upstream_apt_repository [[[
#
# The APT repository URI of the upstream Grafana repository.
grafana__upstream_apt_repository: 'deb https://packages.grafana.com/oss/deb stable main'

                                                                   # ]]]

# .. envvar:: grafana__base_packages [[[
#
# List of APT packages which are required by the Grafana role.
grafana__base_packages: [ 'grafana' ]

                                                                   # ]]]
# .. envvar:: grafana__packages [[[
#
# List of APT packages to install on all hosts in Grafana inventory.
grafana__packages: []

                                                                   # ]]]
                                                                   # ]]]
# Webserver configuration [[[
# ---------------------------

# .. envvar:: grafana__nginx_enabled: True [[[
#
# Enable or disable Nginx dependencies.
grafana__nginx_enabled: True

                                                                   # ]]]
# .. envvar:: grafana__allow [[[
#
# List of IP addresses or CIDR subnets which will be allowed to connect to the
# Grafana in :command:`ip(6)tables` and TCP wrappers. If it's empty, remote
# connections are not allowed.
grafana__allow: []

                                                                   # ]]]
# .. envvar:: grafana__port [[[
#
# Port number on which this Grafana listens on.
grafana__port: '3001'

                                                                   # ]]]
                                                                   # ]]]
# Webserver subpath deployment [[[
# --------------------------------

# .. envvar:: grafana__http_psk_subpath_enabled [[[
#
# Whether Grafana should be deployed on a random subpath that acts as a
# protection of the web app/API from people not knowing this PSK.
# For a discussion in which scenarios this can make sense, refer to
# `RFC: Support subpath/subdir hosting for additional security`__.
#
# .. __: https://github.com/debops/debops/issues/1233
grafana__http_psk_subpath_enabled: False

                                                                   # ]]]
# .. envvar:: grafana__http_psk_subpath [[[
#
# PSK used as subpath that acts as the first layer of defense in a security in
# depth concept if enabled.
grafana__http_psk_subpath: '{{ lookup("password", secret + "/grafana/" +
                                 inventory_hostname + "/config/subpath chars=ascii_letters,digits length=23")
                               if grafana__http_psk_subpath_enabled|bool
                               else "" }}'

                                                                   # ]]]
# .. envvar:: grafana__url [[[
#
# The URL where the Grafana server will be reachable. Exposed as variable here
# as you might want to use it in your custom user password lookup for
# integrating into your password manager.
grafana__url: '{{ "https://" + grafana__fqdn + "/" + grafana__http_psk_subpath }}'

                                                                   # ]]]
# .. envvar:: grafana__admin_auth_basic_realm [[[
#
# A string which will be displayed as the realm in the browser user/password
# dialog box during HTTP Basic Authentication for the admin interface.
grafana__admin_auth_basic_realm: 'Access to Grafana admin interface is restricted'

                                                                   # ]]]
# .. envvar:: grafana__admin_auth_basic_filename [[[
#
# Absolute path to the file that contains usernames and passwords for HTTP
# Basic Authentication for the admin interface.
grafana__admin_auth_basic_filename: ''

                                                                   # ]]]
# .. envvar:: grafana__mail_to [[[
#
# List of recipients to which a mail will be send with the full URL of the
# Grafana server in case :envvar:`grafana__http_psk_subpath` is set.
grafana__mail_to: [ 'root@{{ ansible_domain }}' ]

                                                                   # ]]]
# .. envvar:: grafana__mail_subject [[[
#
# Subject of the Email to be send with the full service URL.
grafana__mail_subject: 'PSK subpath URL to Grafana on {{ ansible_fqdn }}'

                                                                   # ]]]
# .. envvar:: grafana__mail_body [[[
#
# Body of the Email to be send with the full service URL.
grafana__mail_body: |
  Grafana has been deployed for the first time on {{ ansible_fqdn }}.
  You have chosen to deploy the service on a random subpath thus the URL is
  needed to access the service.

  URL: {{ grafana__url }}

  Have a nice day :)

# ]]]
# ]]]
# Grafana configuration file [[[
# ------------------------------

# The variables below define the contents of the
# :file:`/etc/grafana/grafana.ini` configuration file.

# .. envvar:: grafana__default_configuration [[[
#
# The default configuration options which should be present in the main
# configuration file.
grafana__default_configuration:

  - name: 'server'
    options:
      - http_port: '{{ grafana__port }}'
        domain: '{{ grafana__fqdn }}'
        root_url: '{{ grafana__url }}'


  - name: 'server'
    state: '{{ "present" if grafana__http_psk_subpath_enabled|bool else "ignore" }}'
    options:
      - serve_from_sub_path: 'true'

  - name: 'auth.ldap'
    options:
      - enabled: '{{ grafana__ldap_enabled }}'
        config_file: '/etc/grafana/ldap.toml'
        allow_sign_up: '{{ grafana__ldap_allow_sign_up }}'

                                                                   # ]]]
# .. envvar:: grafana__configuration [[[
#
# List of configuration options defined on all hosts in the Grafana inventory.
grafana__configuration: []

                                                                   # ]]]
# .. envvar:: grafana__combined_configuration [[[
#
# Actual list of Grafana configuration options passed to the
# configuration template. This list defines the order in which the options from
# different variables are processed.
grafana__combined_configuration: '{{ grafana__default_configuration + grafana__configuration }}'

                                                                   # ]]]
                                                                   # ]]]
# LDAP Authentication configuration [[[
# -------------------------------------

# More information about LDAP support in Grafana can be found at
# https://grafana.com/docs/grafana/latest/auth/ldap/#grafana-ldap-configuration

# .. envvar:: grafana__ldap_enabled [[[
#
# Enable or disable LDAP support.
grafana__ldap_enabled: '{{ True
                           if (ansible_local|d() and ansible_local.ldap|d() and
                               (ansible_local.ldap.enabled|d())|bool)
                           else False }}'

                                                                   # ]]]
# .. envvar:: grafana__ldap_base_dn [[[
#
# The base Distinguished Name which should be used to create Distinguished
# Names of the LDAP directory objects, defined as a YAML list. If this variable
# is empty, LDAP configuration will not be generated.
grafana__ldap_base_dn: '{{ ansible_local.ldap.base_dn|d([]) }}'

                                                                   # ]]]
# .. envvar:: grafana__ldap_device_dn [[[
#
# The Distinguished Name of the current host LDAP object, defined as a YAML
# list. It will be used as a base for the Grafana service account LDAP object.
# If the list is empty, the role will not create the account LDAP object
# automatically.
grafana__ldap_device_dn: '{{ ansible_local.ldap.device_dn|d([]) }}'

                                                                   # ]]]
# .. envvar:: grafana__ldap_self_rdn [[[
#
# The Relative Distinguished Name of the account LDAP object used by the
# Grafana service to access the LDAP directory.
grafana__ldap_self_rdn: 'uid=grafana'

                                                                   # ]]]
# .. envvar:: grafana__ldap_groups_rdn [[[
#
# The Relative Distinguished Name used by the Grafana service to access
# groups in the LDAP directory.
grafana__ldap_groups_rdn: '{{ ansible_local.ldap.groups_rdn|d("ou=Groups") }}'

                                                                   # ]]]
# .. envvar:: grafana__ldap_self_object_classes [[[
#
# List of the LDAP object classes which will be used to create the LDAP object
# used by the Grafana service to access the LDAP directory.
grafana__ldap_self_object_classes: [ 'account', 'simpleSecurityObject' ]

                                                                   # ]]]
# .. envvar:: grafana__ldap_self_attributes [[[
#
# YAML dictionary that defines the attributes of the LDAP object used by the
# Grafana service to access the LDAP directory.
grafana__ldap_self_attributes:
  uid: '{{ grafana__ldap_self_rdn.split("=")[1] }}'
  userPassword: '{{ grafana__ldap_bindpw }}'
  host: '{{ [ ansible_fqdn, ansible_hostname ] | unique }}'
  description: 'Account used by the "Grafana" service to access the LDAP directory'

                                                                   # ]]]
# .. envvar:: grafana__ldap_binddn [[[
#
# The Distinguished Name of the account LDAP object used by the
# Grafana service to bind to the LDAP directory.
grafana__ldap_binddn: '{{ ([ grafana__ldap_self_rdn ] + grafana__ldap_device_dn) | join(",") }}'

                                                                   # ]]]
# .. envvar:: grafana__ldap_bindpw [[[
#
# The password stored in the account LDAP object used by the Grafana service to
# bind to the LDAP directory.
grafana__ldap_bindpw: '{{ lookup("password", secret + "/ldap/credentials/"
                                 + grafana__ldap_binddn | to_uuid + ".password length=32") }}'

                                                                   # ]]]
# .. envvar:: grafana__ldap_host [[[
#
# FQDN address of the LDAP server to connect to.
grafana__ldap_host: '{{ ansible_local.ldap.hosts|d([""]) | first }}'

                                                                   # ]]]
# .. envvar:: grafana__ldap_port [[[
#
# The LDAP service port to use for connections.
grafana__ldap_port: '{{ "636" if (grafana__ldap_method in ["ssl"])
                        else ansible_local.ldap.port|d("389") }}'

                                                                   # ]]]
# .. envvar:: grafana__ldap_method [[[
#
# The LDAP connection method to use, either ``tls`` (recommended), ``ssl`` or
# ``plain`` (discouraged).
grafana__ldap_method: 'ssl'

                                                                   # ]]]
# .. envvar:: grafana__ldap_user_filter [[[
#
# LDAP search query which will be used by the Grafana service to filter the
# available user accounts. Without whitespaces.
grafana__ldap_user_filter: '(&(objectClass=inetOrgPerson)(uid=%s)(|(authorizedService=all)(authorizedService=grafana)(authorizedService=web:public)))'

                                                                   # ]]]
# .. envvar:: grafana__ldap_group_filter [[[
#
# LDAP search query which will be used by the Grafana service to filter the
# available groups. Without whitespaces.
grafana__ldap_group_filter: '(&(objectClass=groupOfNames)(|(authorizedService=all)(authorizedService=grafana)(authorizedService=web:public)))'

                                                                   # ]]]
# .. envvar:: grafana__ldap_group_filter_user_attribute [[[
#
# LDAP search query which will be used by the Grafana service to filter the
# available groups.
grafana__ldap_group_filter_user_attribute: 'member'

                                                                   # ]]]
# .. envvar:: grafana__ldap_group_base_dns [[[
#
# LDAP base DN which will be used by the Grafana service to filter the
# available groups.
grafana__ldap_group_base_dns: '{{ ([ grafana__ldap_groups_rdn ] + grafana__ldap_base_dn) | join(",") }}'

                                                                   # ]]]
# .. envvar:: grafana__ldap_allow_sign_up [[[
#
# Allow sign up should almost always be true (default) to allow new Grafana
# users to be created (if ldap authentication is ok). If set to false only
# pre-existing Grafana users will be able to login (if ldap authentication is ok).
grafana__ldap_allow_sign_up: True

                                                                   # ]]]
# .. envvar:: grafana__ldap_default_configuration [[[
#
# The LDAP default configuration options which should be present in the LDAP
# configuration file.
grafana__ldap_default_configuration:

  - name: 'default_server'
    section_name: 'servers'
    section_list: True
    options:
      - host: '"{{ grafana__ldap_host }}"'
        port: '{{ grafana__ldap_port }}'
        use_ssl: '{{ grafana__ldap_method in ["ssl"] }}'
        start_tls: '{{ grafana__ldap_method in ["tls"] }}'
        ssl_skip_verify: False
        bind_dn: '"{{ grafana__ldap_binddn }}"'
        bind_password: '''{{ grafana__ldap_bindpw }}'''
        search_filter: '"{{ grafana__ldap_user_filter }}"'
        search_base_dns: [ '{{ grafana__ldap_base_dn | join(",") }}' ]
        group_search_filter: '"{{ grafana__ldap_group_filter }}"'
        group_search_filter_user_attribute: '"{{ grafana__ldap_group_filter_user_attribute }}"'
        group_search_base_dns: [ '{{ grafana__ldap_group_base_dns }}' ]

  - name: 'default_server_attributes'
    section_name: 'servers.attributes'
    options:
      - name: 'name'
        value: '"givenName"'
      - surname: '"sn"'
        username: '"uid"'
        email: '"mail"'

                                                                   # ]]]
# .. envvar:: grafana__ldap_configuration [[[
#
# List of LDAP configuration options defined on all hosts in the Grafana inventory.
grafana__ldap_configuration: []

                                                                   # ]]]
# .. envvar:: grafana__ldap_combined_configuration [[[
#
# Actual list of Grafana configuration options passed to the
# configuration template. This list defines the order in which the options from
# different variables are processed.
grafana__ldap_combined_configuration: '{{ grafana__ldap_default_configuration + grafana__ldap_configuration }}'

                                                                   # ]]]
                                                                   # ]]]
# Configuration for other Ansible roles [[[
# -----------------------------------------

# .. envvar:: grafana__ferm__dependent_rules [[[
#
# Configuration for :ref:`debops.ferm` Ansible role.
grafana__ferm__dependent_rules:

  - type: 'accept'
    dport: [ 'grafana' ]
    saddr: '{{ grafana__allow }}'
    accept_any: True
    weight: '40'
    role: 'grafana'
    rule_state: '{{ "absent" if (grafana__nginx_enabled | bool) else "present" }}'

                                                                   # ]]]
# .. envvar:: grafana__etc_services__dependent_list [[[
#
# Configuration for the :ref:`debops.etc_services` Ansible role.
grafana__etc_services__dependent_list:

  - name: 'grafana'
    port: '{{ grafana__port }}'

                                                                   # ]]]
# .. envvar:: grafana__keyring__dependent_apt_keys [[[
#
# Configuration for the :ref:`debops.keyring` Ansible role.
grafana__keyring__dependent_apt_keys:

  - id: '{{ grafana__upstream_apt_id }}'
    repo: '{{ grafana__upstream_apt_repository }}'

                                                                   # ]]]
# .. envvar:: grafana__ldap__dependent_tasks [[[
#
# Configuration for the :ref:`debops.ldap` Ansible role.
grafana__ldap__dependent_tasks:

  - name: 'Create Grafana account for {{ grafana__ldap_device_dn | join(",") }}'
    dn: '{{ grafana__ldap_binddn }}'
    objectClass: '{{ grafana__ldap_self_object_classes }}'
    attributes: '{{ grafana__ldap_self_attributes }}'
    no_log: True
    state: '{{ "present" if grafana__ldap_device_dn|d() else "ignore" }}'

                                                                   # ]]]
# .. envvar:: grafana__nginx__dependent_upstreams [[[
#
# Upstream configuration for the :ref:`debops.nginx` Ansible role.
grafana__nginx__dependent_upstreams:
  - name: 'grafana'
    server: [ 'localhost' ]
    port: '{{ grafana__port }}'

                                                                   # ]]]
# .. envvar:: grafana__nginx__dependent_servers [[[
#
# Server configuration for the :ref:`debops.nginx` Ansible role.
grafana__nginx__dependent_servers:
  - name: '{{ grafana__fqdn }}'
    by_role: 'debops.grafana'
    filename: 'debops.grafana'
    type: proxy
    proxy_pass: 'http://grafana'
    proxy_location: '/{{ grafana__http_psk_subpath }}'
                                                                   # ]]]
                                                                   # ]]]
